@* @page "/EditarMatricula/{id:int}"
@inject NavigationManager navigationManager
@inject MatriculaAPI MatriculaAPI
@inject AlunoAPI AlunoAPI
@inject CursoAPI CursoAPI

<MudPaper Class="px-8 pt-6 pb-8 mx-12 my-8" Elevation="3" Square="true">
    <MudText Class="mt-8" Typo="Typo.h4" Color="Color.Primary">Editar Matrícula</MudText>

    @if (!string.IsNullOrEmpty(MensagemAlerta) && CamposVazios())
    {
        <MudAlert Severity="Severity.Error" Variant="Variant.Filled">@MensagemAlerta!</MudAlert>
    }

    <MudForm Class="mt-6">

        <MudSelect T="int" Label="Aluno" @bind-Value="Matricula.Id_Aluno" Required="true" RequiredError="Campo obrigatório.">
            @foreach (var aluno in Alunos)
            {
                <MudSelectItem T="int" Value="@aluno.Id_Aluno">@aluno.nome</MudSelectItem>
            }
        </MudSelect>

        <MudSelect T="int" Label="Curso" @bind-Value="Matricula.Id_Curso" Required="true" RequiredError="Campo obrigatório.">
            @foreach (var curso in Cursos)
            {
                <MudSelectItem T="int" Value="@curso.Id_Curso">@curso.nome</MudSelectItem>
            }
        </MudSelect>

        <MudDatePicker Label="Data da Matrícula" @bind-Date="Matricula.Data_Matricula" Required="true" RequiredError="Campo obrigatório." />

        <MudSelect T="string" Label="Status da Matrícula" @bind-Value="Matricula.Status_Matricula" Required="true" RequiredError="Campo obrigatório.">
            <MudSelectItem Value="Ativa">Ativa</MudSelectItem>
            <MudSelectItem Value="Trancada">Trancada</MudSelectItem>
            <MudSelectItem Value="Cancelada">Cancelada</MudSelectItem>
            <MudSelectItem Value="Concluída">Concluída</MudSelectItem>
        </MudSelect>

        <div class="d-flex justify-end mt-6">
            <MudButton Variant="Variant.Filled"
                       StartIcon="@Icons.Material.Filled.Save"
                       @onclick="Editar"
                       Color="Color.Warning">
                Editar
            </MudButton>
        </div>
    </MudForm>
</MudPaper>

@code {
    [Parameter]
    public int id { get; set; }

    private MatriculaEdit Matricula = new();
    private List<AlunoResponse> Alunos = new();
    private List<CursoResponse> Cursos = new();
    private string MensagemAlerta = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var matriculaResponse = await MatriculaAPI.GetMatriculaPorIdAsync(id);
            if (matriculaResponse != null)
            {
                Matricula = new MatriculaEdit(
                    matriculaResponse.Id_Matricula,
                    matriculaResponse.Id_aluno,
                    matriculaResponse.Id_Curso,
                    matriculaResponse.Data_Matricula,
                    matriculaResponse.Status_Matricula
                );
            }
            else
            {
                MensagemAlerta = "Matrícula não encontrada!";
                return;
            }

            Alunos = (await AlunoAPI.GetAlunosAsync()).ToList();
            Cursos = (await CursoAPI.GetCursoAsync()).ToList();

        }
        catch (Exception ex)
        {
            MensagemAlerta = $"Erro ao carregar os dados: {ex.Message}";
        }
    }

    private async Task Editar()
    {
        if (CamposVazios())
        {
            MensagemAlerta = "Preencha os campos obrigatórios!";
            return;
        }

        try
        {
            var sucesso = await MatriculaAPI.UpdateMatriculaAsync(Matricula);
            if (sucesso)
            {
                navigationManager.NavigateTo("/Matriculas/");
            }
            else
            {
                MensagemAlerta = "Erro ao atualizar a matrícula!";
            }
        }
        catch (Exception ex)
        {
            MensagemAlerta = $"Erro ao atualizar a matrícula: {ex.Message}";
        }
    }

    private bool CamposVazios()
    {
        return Matricula.Id_Aluno == 0 ||
               Matricula.Id_Curso == 0 ||
               Matricula.Data_Matricula == default ||
               string.IsNullOrWhiteSpace(Matricula.);
    }
} *@
